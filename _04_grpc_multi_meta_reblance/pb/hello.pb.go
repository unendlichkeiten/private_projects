// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: hello.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Say string `protobuf:"bytes,1,opt,name=say,proto3" json:"say,omitempty"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hello_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_hello_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_hello_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetSay() string {
	if x != nil {
		return x.Say
	}
	return ""
}

type Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *Res) Reset() {
	*x = Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hello_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_hello_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_hello_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

var File_hello_proto protoreflect.FileDescriptor

var file_hello_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x5f,
	0x30, 0x34, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0x17, 0x0a, 0x03, 0x52,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x61, 0x79, 0x22, 0x1b, 0x0a, 0x03, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x32, 0xb9, 0x01, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x21, 0x2e, 0x5f, 0x30, 0x34, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x5f, 0x30,
	0x34, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x0d, 0x42, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x12, 0x21, 0x2e, 0x5f, 0x30, 0x34, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x2e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x5f, 0x30, 0x34, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x5d, 0x0a,
	0x05, 0x53, 0x6d, 0x69, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x6d, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x5f, 0x30, 0x34, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x5f, 0x30, 0x34, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05,
	0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hello_proto_rawDescOnce sync.Once
	file_hello_proto_rawDescData = file_hello_proto_rawDesc
)

func file_hello_proto_rawDescGZIP() []byte {
	file_hello_proto_rawDescOnce.Do(func() {
		file_hello_proto_rawDescData = protoimpl.X.CompressGZIP(file_hello_proto_rawDescData)
	})
	return file_hello_proto_rawDescData
}

var file_hello_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_hello_proto_goTypes = []interface{}{
	(*Req)(nil), // 0: _04_grpc_deadline_and_cancel.Req
	(*Res)(nil), // 1: _04_grpc_deadline_and_cancel.Res
}
var file_hello_proto_depIdxs = []int32{
	0, // 0: _04_grpc_deadline_and_cancel.Chat.UnaryHello:input_type -> _04_grpc_deadline_and_cancel.Req
	0, // 1: _04_grpc_deadline_and_cancel.Chat.BiStreamHello:input_type -> _04_grpc_deadline_and_cancel.Req
	0, // 2: _04_grpc_deadline_and_cancel.Smile.UnarySmile:input_type -> _04_grpc_deadline_and_cancel.Req
	1, // 3: _04_grpc_deadline_and_cancel.Chat.UnaryHello:output_type -> _04_grpc_deadline_and_cancel.Res
	1, // 4: _04_grpc_deadline_and_cancel.Chat.BiStreamHello:output_type -> _04_grpc_deadline_and_cancel.Res
	1, // 5: _04_grpc_deadline_and_cancel.Smile.UnarySmile:output_type -> _04_grpc_deadline_and_cancel.Res
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_hello_proto_init() }
func file_hello_proto_init() {
	if File_hello_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hello_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hello_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hello_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_hello_proto_goTypes,
		DependencyIndexes: file_hello_proto_depIdxs,
		MessageInfos:      file_hello_proto_msgTypes,
	}.Build()
	File_hello_proto = out.File
	file_hello_proto_rawDesc = nil
	file_hello_proto_goTypes = nil
	file_hello_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	UnaryHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	BiStreamHello(ctx context.Context, opts ...grpc.CallOption) (Chat_BiStreamHelloClient, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) UnaryHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/_04_grpc_deadline_and_cancel.Chat/UnaryHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) BiStreamHello(ctx context.Context, opts ...grpc.CallOption) (Chat_BiStreamHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/_04_grpc_deadline_and_cancel.Chat/BiStreamHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatBiStreamHelloClient{stream}
	return x, nil
}

type Chat_BiStreamHelloClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type chatBiStreamHelloClient struct {
	grpc.ClientStream
}

func (x *chatBiStreamHelloClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatBiStreamHelloClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	UnaryHello(context.Context, *Req) (*Res, error)
	BiStreamHello(Chat_BiStreamHelloServer) error
}

// UnimplementedChatServer can be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (*UnimplementedChatServer) UnaryHello(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryHello not implemented")
}
func (*UnimplementedChatServer) BiStreamHello(Chat_BiStreamHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method BiStreamHello not implemented")
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_UnaryHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UnaryHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_04_grpc_deadline_and_cancel.Chat/UnaryHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UnaryHello(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_BiStreamHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).BiStreamHello(&chatBiStreamHelloServer{stream})
}

type Chat_BiStreamHelloServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type chatBiStreamHelloServer struct {
	grpc.ServerStream
}

func (x *chatBiStreamHelloServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatBiStreamHelloServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "_04_grpc_deadline_and_cancel.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryHello",
			Handler:    _Chat_UnaryHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BiStreamHello",
			Handler:       _Chat_BiStreamHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}

// SmileClient is the client API for Smile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmileClient interface {
	UnarySmile(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type smileClient struct {
	cc grpc.ClientConnInterface
}

func NewSmileClient(cc grpc.ClientConnInterface) SmileClient {
	return &smileClient{cc}
}

func (c *smileClient) UnarySmile(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/_04_grpc_deadline_and_cancel.Smile/UnarySmile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmileServer is the server API for Smile service.
type SmileServer interface {
	UnarySmile(context.Context, *Req) (*Res, error)
}

// UnimplementedSmileServer can be embedded to have forward compatible implementations.
type UnimplementedSmileServer struct {
}

func (*UnimplementedSmileServer) UnarySmile(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnarySmile not implemented")
}

func RegisterSmileServer(s *grpc.Server, srv SmileServer) {
	s.RegisterService(&_Smile_serviceDesc, srv)
}

func _Smile_UnarySmile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmileServer).UnarySmile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_04_grpc_deadline_and_cancel.Smile/UnarySmile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmileServer).UnarySmile(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Smile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "_04_grpc_deadline_and_cancel.Smile",
	HandlerType: (*SmileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnarySmile",
			Handler:    _Smile_UnarySmile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
